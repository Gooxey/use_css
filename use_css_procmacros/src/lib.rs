#![doc = include_str!("../README.md")]

use std::{
    fs::File,
    io::Read,
    path::PathBuf,
};

use css::Css;
use proc_macro::TokenStream;
use quote::quote;
use syn::parse::{
    Parse,
    ParseStream,
    Result,
};

mod css;

/// This struct points to the css file this proc macro will use. \
/// \
/// We need to use this way of getting the css file since the [`source file function`](https://doc.rust-lang.org/proc_macro/struct.SourceFile.html) is only available on the
/// nightly channel.
#[derive(Debug)]
struct FileName {
    file_path: PathBuf,
}
impl Parse for FileName {
    fn parse(input: ParseStream) -> Result<Self> {
        let lit_file: syn::LitStr = input.parse()?;

        Ok(Self {
            file_path: PathBuf::new()
                .join("src")
                .join(lit_file.value())
                .join("style.css"),
        })
    }
}

/// See the [`crate's documentation`](https://docs.rs/use_css/latest/use_css/) for more details.
#[proc_macro]
pub fn use_css(input: TokenStream) -> TokenStream {
    let input = syn::parse_macro_input!(input as FileName);

    // get the path to the css file
    let cwd: std::path::PathBuf = std::env::current_dir()
        .unwrap_or_else(|erro| panic!("Unable to acquire the cwd! Error: {erro}"));
    let file_path = cwd.join(input.file_path);
    let file_path_str = format!("{}", file_path.display());

    // read the css file to a string
    let mut file = File::open(file_path.clone()).unwrap_or_else(|erro| {
        panic!(
            "Could not open the file at `{}`! Error: {erro}",
            file_path.display()
        )
    });
    let mut contents = String::new();
    file.read_to_string(&mut contents).unwrap_or_else(|erro| {
        panic!(
            "Unable to read the file at `{}` to a string! Error: {erro}",
            file_path.display()
        )
    });

    // generate functions from the css file
    let css = Css::from(contents);
    let rust_code = css.to_rust();

    let result = quote!(
        /// This macro has been generated by the [`use_css`](use_css::use_css) macro. For more details on this module see the [`use_css crate's documentation`](use_css).
        mod style {
            use std::str::FromStr;
            use use_css::stylist::StyleSource;

            const CSS_STR: &'static str = include_str!(#file_path_str);

            #rust_code
        }
    );

    TokenStream::from(result)
}
