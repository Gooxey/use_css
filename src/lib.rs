//! Instead of using the [`use_css!`] macro, one can also just use the [`stylist`](https://crates.io/crates/stylist) crate. But the problem you will face is that VSCode won't be able to provide its full feature set
//! regarding CSS code. Therefore, the best solution is to use CSS files. The only question now is: How do you use CSS code inside your [`Yew`](https://yew.rs) project?
//! Well, you need to generate Rust code based on these files. And to do this, you can use this macro.
//!
//! # Disclaimer
//!
//! This library is currently not under active development, but features will be added once they are needed in my other projects.
//!
//! # Requirements
//!
//! To use the css code in your [`Yew`](https://yew.rs) project, you will need add [`stylist`](https://crates.io/crates/stylist) as a dependency:
//! ```bash
//! cargo add stylist
//! ```
//!
//! # Example
//!
//! Let's say this is your project structure:
//! ```text
//! |
//! | -frontend
//! |  | -src
//! |  |  | -title_bar
//! |  |  |  | -mod.rs
//! |  |  |  | -style.css // This file has to be call like this
//! |  |  | -main.rs
//! |  | -Cargo.toml
//! |  | -Cargo.lock
//! |  | -index.html
//! ```
//!
//! With `style.css` looking like:
//! ```css
//! titlebar { /* The name of titlebar should be unique to this file and not be surrounded by anything. */
//!     display: flex;
//!
//!     height: 10px;
//!     width: 10px;
//! }
//! ```
//!
//! To use this style in `mod.rs`, you can write something like:
//! ```
//! use yew::prelude::*;
//! use use_css::use_css;
//!
//! use_css!("title_bar"); // The string given should be the path, starting from `scr/`, to the folder where the desired `style.css` can be found.
//!
//! #[function_component]
//! pub fn TitleBar() -> Html {
//!     html! {
//!         <>
//!             <div class={style::titlebar()}>
//!                 <span>{"Hello world"}</span>
//!             </div>
//!         </>
//!     }
//! }
//! ```
//!
//! If one decided to write the generated code manually, it would look like this:
//! ```
//! use yew::prelude::*;
//!
//! mod style {
//!     use stylist::{
//!         css,
//!         StyleSource,
//!     };
//!
//!     pub fn titlebar() -> StyleSource {
//!         css!("
//!             display: flex;
//!
//!             height: 10px;
//!             width: 10px;
//!         ")
//!     }
//! }
//!
//! // Implementation of the TitleBar component...
//! ```

// FIXME add functionality for proper nested styles

use std::{
    fs::File,
    io::Read,
    path::PathBuf,
};

use css::Css;
use proc_macro::TokenStream;
use quote::quote;
use syn::parse::{
    Parse,
    ParseStream,
    Result,
};

mod css;

#[derive(Debug)]
struct FileName {
    file_path: PathBuf,
}
impl Parse for FileName {
    fn parse(input: ParseStream) -> Result<Self> {
        let lit_file: syn::LitStr = input.parse()?;

        Ok(Self {
            file_path: PathBuf::new()
                .join("src")
                .join(lit_file.value())
                .join("style.css"),
        })
    }
}

/// See the [`crate's documentation`](crate) for more details.
#[proc_macro]
pub fn use_css(input: TokenStream) -> TokenStream {
    let input = syn::parse_macro_input!(input as FileName);

    // get the path to the css file
    let cwd: std::path::PathBuf = std::env::current_dir()
        .unwrap_or_else(|erro| panic!("Unable to acquire the cwd! Error: {erro}"));
    let file_path = cwd.join(input.file_path);
    let file_path_str = format!("{}", file_path.display());

    // read the css file to a string
    let mut file = File::open(file_path.clone()).unwrap_or_else(|erro| {
        panic!(
            "Could not open the file at `{}`! Error: {erro}",
            file_path.display()
        )
    });
    let mut contents = String::new();
    file.read_to_string(&mut contents).unwrap_or_else(|erro| {
        panic!(
            "Unable to read the file at `{}` to a string! Error: {erro}",
            file_path.display()
        )
    });

    // generate functions from the css file
    let css = Css::from(contents);
    let rust_code = css.to_rust();

    let result = quote!(
        /// This macro has been generated by the [`use_css`](use_css::use_css) macro. For more details on this module see the [`use_css crate's documentation`](use_css).
        mod style {
            use std::str::FromStr;

            const CSS_STR: &'static str = include_str!(#file_path_str);

            #rust_code
        }
    );

    TokenStream::from(result)
}
