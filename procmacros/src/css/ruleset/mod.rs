use proc_macro2::TokenStream;
use quote::{
    format_ident,
    quote,
};

pub struct RuleSet {
    name: String,
    content: String,
}
impl RuleSet {
    /// Generate rust functions from the parsed css code.
    pub fn to_rust(&self) -> TokenStream {
        let content = self.content.clone();
        let name = format_ident!("{}", self.name.to_string());
        quote!(
            /// This function has been generated by the [`use_css`](use_css::use_css) macro. For more detail on this function see the [`use_css crate's documentation`](use_css).
            pub fn #name() -> StyleSource {
                StyleSource::from_str(#content).expect("The given code is not css!")
            }
        )
    }
}
impl From<Vec<&str>> for RuleSet {
    fn from(value: Vec<&str>) -> Self {
        // get the content of this ruleset
        // the first and last line will be removed
        let mut content = value.clone();
        content.remove(0);
        content.pop();
        let content = content.join("\n");

        // Get the name of this Ruleset
        let mut name = value
            .first()
            .expect("The Ruleset should consist of at least 1 line!")
            .to_string();
        // strip the common prefixes from the name
        if let Some(stripped_name) = name.strip_prefix('.') {
            name = stripped_name.to_string();
        } else if let Some(stripped_name) = name.strip_prefix('#') {
            name = stripped_name.to_string();
        }
        name = name
            .strip_suffix('{')
            .expect("The first line should contain `{`.")
            .into();
        name = name.trim().into();

        Self { name, content }
    }
}
